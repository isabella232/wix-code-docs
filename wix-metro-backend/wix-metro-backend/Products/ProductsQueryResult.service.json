{
  "name": "ProductsQueryResult",
  "memberOf": "wix-metro-backend.Products",
  "mixes": [],
  "callbacks": [],
  "extra": {},
  "clientId": "wix-metro-backend-product.products.products-query-result",
  "docs": {},
  "relatedGuides": [],
  "properties": [
    {
      "name": "items",
      "type": [
        {
          "complexType": {
            "nativeType": "Array",
            "typeParams": [
              {
                "referenceType": "wix-metro-backend.Products.Product"
              }
            ]
          }
        }
      ],
      "docs": {
        "summary": "Returns an array of `products` that match the query.,,",
        "description": [
          "The current page of `products` retrieved by the query.",
          "",
          "The page size is defined by the `limit()` function, can be retrieved using the `pageSize` property, and navigating through pages is done with the `prev()` and `next()` functions.",
          "",
          "When no items match the query, the `products` array is empty."
        ],
        "examples": [
          {
            "title": "items example",
            "body": [
              "import { products } from 'wix-metro-backend';",
              "//...",
              "products",
              "  .queryProducts()",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "length",
      "type": [
        {
          "nativeType": "number"
        }
      ],
      "docs": {
        "summary": "Returns the number of items in the current results page.,,",
        "description": [
          "The page size is defined by the `limit()` function, can be retrieved using the `pageSize` property, and navigating through pages is done with the `prev()` and `next()` functions."
        ],
        "examples": [
          {
            "title": "length example",
            "body": [
              "import { products } from 'wix-metro-backend';",
              "//...",
              "products",
              "  .queryProducts()",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "",
              "      const resultLength = results.length; // 20",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "pageSize",
      "type": [
        {
          "nativeType": "number"
        }
      ],
      "docs": {
        "summary": "",
        "description": [
          ""
        ],
        "examples": [
          {
            "title": "pageSize example",
            "body": [
              "import { products } from 'wix-metro-backend';",
              "//...",
              "products",
              "  .queryProducts()",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    },
    {
      "name": "query",
      "type": [
        {
          "referenceType": "wix-metro-backend.Products.ProductsQueryBuilder"
        }
      ],
      "docs": {
        "summary": "Returns the `ProductsQueryBuilder` object used to get the current results.,,",
        "description": [
          "Use the `query` property to create and run a new query by chaining additional `ProductsQueryBuilder` functions to it. You can only filter on properties that have not already been used in the previous query."
        ],
        "examples": [
          {
            "title": "query example",
            "body": [
              "import { products } from 'wix-metro-backend';",
              "//...",
              "products",
              "  .queryProducts()",
              "  .find()",
              "  .then((results) => {",
              "    if (results.items.length > 0) {",
              "      const items = results.items;",
              "      const firstItem = items[0];",
              "      const pageSize = results.pageSize;",
              "      const hasNext = results.hasNext();",
              "      const hasPrev = results.hasPrev();",
              "      const length = results.length;",
              "      const newQuery = results.query;",
              "      newQuery.eq('title', 'some-title').find((newQueryResults) => {",
              "        const firstItem = newQueryResults.items[0];",
              "      });",
              "    } else {",
              "      // handle case where no matching items found",
              "    }",
              "  })",
              "  .catch((error) => {",
              "    console.error(error);",
              "  });",
              ""
            ]
          }
        ]
      }
    }
  ],
  "operations": [],
  "messages": []
}
